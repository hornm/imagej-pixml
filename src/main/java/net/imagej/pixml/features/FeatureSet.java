package net.imagej.pixml.features;

import java.util.List;

import org.scijava.command.Command;
import org.scijava.plugin.Parameter;

import net.imagej.ops.special.hybrid.UnaryHybridCF;
import net.imagej.pixml.ui.swing.SwingFeatureSetsWidget;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.type.numeric.RealType;

/**
 * Represents a number of features to be calculated for an image.
 * {@link #calcOp()} will return an op that lets one perform the actual
 * calculation.
 * 
 * For easy configuration just annotate the respective fields with
 * {@link Parameter} and they will be injected automatically when used within a
 * {@link Command}-plugin (see {@link SwingFeatureSetsWidget}.
 * 
 * @author Martin Horn
 */
public interface FeatureSet extends Command {

	/**
	 * @return the number of features provided by this features set
	 */
	int getNumFeatures();

	/**
	 * Returns a {@link UnaryHybridCF}-op that calculates the features. The list
	 * of imgs generated by the returned op has the same length as the number of
	 * features ({@link #getNumFeatures()}).
	 * 
	 */
	<I extends RealType<I>, O extends RealType<O>> UnaryHybridCF<RandomAccessibleInterval<I>, List<RandomAccessibleInterval<O>>> calcOp();

	@Override
	default void run() {
		// usually nothing to do here
	}

}
